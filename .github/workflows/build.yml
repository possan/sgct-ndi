# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build for Windows

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [windows-latest]
        build_type: [Debug]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    # See: https://github.com/lukka/CppBuildTasks-Validation/blob/v10/.github/workflows/hosted-ninja-vcpkg_submod-triplet.yml
    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Git Submodule Update
        run: |
          git submodule update --init --recursive

      - uses: lukka/get-cmake@latest

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      #- name: Setup anew (or from cache) vcpkg (and does not build any package)
      #  uses: lukka/run-vcpkg@v11
      #  with:
      #    vcpkgGitCommitId: 'c8696863d371ab7f46e213d8f5ca923c4aef2a00'
      #    # vcpkgGitCommitId: 'ff6867374598312866fecfc64736a334591ceace'
      #    runVcpkgInstall: true

      # git checkout c8696863d371ab7f46e213d8f5ca923c4aef2a00
      - name: Install Vcpkg
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          bootstrap-vcpkg.bat

      - name: Install Dependencies
        run: |
          vcpkg integrate install

      - name: Install Dependencies 2
        run: |
          vcpkg install

      - name: Cache Vcpkg Packages
        uses: actions/cache@v2
        with:
          path: vcpkg/packages
          key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}

      - name: Build Project
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
          make

      - name: Prints output of run-vcpkg's action.
        run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_DEFAULT_TRIPLET_OUT }}' "

      #- name: Restore vcpkg packages
      #  working-directory: ${{env.GITHUB_WORKSPACE}}
      #  run: vcpkg integrate install
      #  # c8696863d371ab7f46e213d8f5ca923c4aef2a00

      #- name: Run CMake+vcpkg+NinjaMulti-Config
      #  uses: lukka/run-cmake@v10
      #  id: runcmake
      #  with:
      #    # cmakeListsTxtPath: "${{ github.workspace }}/cmakepresets/CMakeLists.txt"
      #    configurePreset: "ninja-multi-vcpkg"
      #    buildPreset: "ninja-multi-vcpkg"
      #    -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake
      #    buildPresetAdditionalArgs: "[`--config Debug`]"

      - name: Build library
        run: cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake"

      - name: List $RUNNER_WORKSPACE after build
        run: find $RUNNER_WORKSPACE
        shell: bash
      # - uses: msys2/setup-msys2@v2
      #   with:
      #     msystem: mingw64
      #     update: true
      #     install: >-
      #       git
      #       make
      #     pacboy: >-
      #       toolchain:p
      #       cmake:p
      #       ninja:p
      #       ffmpeg:p

      # - shell: msys2 {0}
      #   run: |
      #     uname -a

      # - shell: msys2 {0}
      #   run: |
      #     pacman --noconfirm -S mingw-w64-ucrt-x86_64-ffmpeg mingw-w64-ucrt-x86_64-cmake

      # - shell: msys2 {0}
      #   run: |
      #     mkdir build
      #     cd build
      #     cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug ..
      #     ninja

      # cmake --build ..
      # - shell: msys2
      #   run: |
      #     makepkg-mingw -sCLfc --noconfirm --noprogressbar
      #     pacman --noconfirm -U mingw-w64-*-any.pkg.tar.xz

      # - name: Configure CMake
      #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      #   run: >
      #     cmake -B ${{ steps.strings.outputs.build-output-dir }}
      #     -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
      #     -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
      #     -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
      #     -S ${{ github.workspace }}

      # - name: Build
      #   # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      #   run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    #- name: Test
    #  working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #  # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
    #  # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #  run: ctest --build-config ${{ matrix.build_type }}
